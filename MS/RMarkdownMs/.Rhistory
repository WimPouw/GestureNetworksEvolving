kinematics<- data.frame()
kin <- subset(seeds, seedsetnum %in% ts$seedsetnum[ts$chain == ch])
for(o in unique(kin$object))
{
subkin <- kin[kin$object == o,]
kinematics <- rbind(kinematics, kin.get(subkin))
}
}
#save kinematic info
submovements <- c(submovements, mean(kinematics[,1], na.rm=TRUE))
smoothness <- c(smoothness, mean(kinematics[,2], na.rm=TRUE))
gspace <- c(gspace, mean(kinematics[,3], na.rm=TRUE))
}
}
}
seeds  <- subset(ts, as.character(generation) ==  "s")  #keep only seed gestures
entropy1 <- chain <- generation <- clustercof <- kinch <- cluster_persistence <- p <-
submovements <- smoothness <- gspace <-   entropyWfun  <-entropyWtheme <-  vector()
for(ch in c("chain1", "chain2", "chain3", "chain4", "chain5"))
{
for(gen in c(0:5))
{
if(gen == 0)
{
participants <- ""
type = "0_"
}
if(gen != 0)
{
type = "1_"
participants <- as.character(unique(ts$ppn[ts$chain == ch & ts$generation == gen]))
}
#DO network analysis
for(ppn in participants)
{
mat <- read.csv(paste0(matrices_data, type, ch, gen, ppn, ".csv"))
funtypes <-  unique(ts$functional)
themtypes <-  unique(ts$theme)
for(at in 1:4)
{
indexfun <- which(colnames(mat)%in%unique(ts$object[ts$functional==funtypes[at] ]) )
fun_mat     <- mat[indexfun,  indexfun]
indextheme <- which(colnames(mat)%in%unique(ts$object[ts$theme==themtypes[at] ]) )
them_mat     <- mat[indextheme, indextheme]
#within theme/function entropy/distance
tempfunnet <- graph.adjacency(as.matrix(fun_mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropyWfun <- c(entropyWfun, mean(diversity(tempfunnet)))
tempthemnet <- graph.adjacency(as.matrix(them_mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropyWtheme <- c(entropyWtheme, mean(diversity(tempthemnet)))
}
#compute entropy
tempnet <- graph.adjacency(as.matrix(mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropy1 <- c(entropy1, mean(diversity(tempnet)))
chain <- c(chain, ch)
generation <- c(generation, gen)
#agglomerative cluster coefficient
cl <- agnes(mat, method = "ward")
clustercof <- c(clustercof, cl$ac)
#average component persistence (TDA)
phom.dat <-   as.data.frame(calculate_homology(as.dist(mat), format = "distmat"))
phom.dat <-    phom.dat[phom.dat$dimension==0,]
phom.dat$persistence <-   phom.dat[,3]-phom.dat[,2]
tresh <- id_significant(phom.dat, dim = 0, cutoff = 0.975)
pers_loops <- sum(phom.dat$persistence > tresh)
persistence <- mean(phom.dat$persistence[phom.dat$persistence > tresh],na.rm=TRUE)
cluster_persistence <- c(cluster_persistence, persistence)
p <- c(p, ppn)
#get time series to regress for kinematic analysis
if(gen != 0)
{
kinematics<- data.frame()
kin <- ts[ts$ppn == ppn,]
for(o in unique(kin$object))
{
subkin <- kin[kin$object == o,]
kinematics <- rbind(kinematics, kin.get(subkin))
}
}
if(gen == 0)
{
kinematics<- data.frame()
kin <- subset(seeds, seedsetnum %in% ts$seedsetnum[ts$chain == ch])
for(o in unique(kin$object))
{
subkin <- kin[kin$object == o,]
kinematics <- rbind(kinematics, kin.get(subkin))
}
}
#save kinematic info
submovements <- c(submovements, mean(kinematics[,1], na.rm=TRUE))
smoothness <- c(smoothness, mean(kinematics[,2], na.rm=TRUE))
gspace <- c(gspace, mean(kinematics[,3], na.rm=TRUE))
}
}
}
ned <- cbind.data.frame(chain, generation, entropy1, clustercof, cluster_persistence,p, submovements, gspace, smoothness,  entropyWtheme, entropyWfun)
FUNCTION extractR.traces: we often need to extract the relevant movement traces from the dataset for input for the Multivariate DTW
#the relevant z-scaled and centered x,y, traces are left and right hand movement, head movement
#this function extracts these traces to be used as inpute for DTW
extractR.traces <- function(dat)
{
dat <- data.frame(dat)
ts1 <- cbind( as.vector(scale(dat$x_index_left, center = TRUE)),
as.vector(scale(dat$y_index_left, center = TRUE)),
as.vector(scale(dat$x_index_right, center = TRUE)),
as.vector(scale(dat$y_index_right, center = TRUE)),
as.vector(scale(dat$x_wrist_left, center = TRUE)),
as.vector(scale(dat$y_wrist_left, center = TRUE)),
as.vector(scale(dat$x_wrist_right, center = TRUE)),
as.vector(scale(dat$y_wrist_right, center = TRUE)),
as.vector(scale(dat$x_nose, center = TRUE)),
as.vector(scale(dat$y_nose, center = TRUE)))
}
#FUNCTION extractR.traces:
DTW.compare <- function(TS1, TS2)
{
#make sure that if there is nothing detected than set to 0
TS1 <- ifelse(is.nan(TS1), 0, TS1)
TS2 <- ifelse(is.nan(TS2), 0, TS2)
distancedtw <<-  dtw(  TS1[,1:2],   TS2[,1:2])$normalizedDistance +
dtw(  TS1[,3:4],   TS2[,3:4])$normalizedDistance +
dtw(  TS1[,5:6],   TS2[,5:6])$normalizedDistance +
dtw(  TS1[,7:8],   TS2[,7:8])$normalizedDistance +
dtw(  TS1[,9:10],   TS2[,9:10])$normalizedDistance
}
#butterworth filter 33 Hz
butter.it <- function(x)
{bf <- butter(1, 1/33, type="low")
x <- as.numeric(signal::filter(bf, x))}
#dimensionless smoothness measure
smooth.get <- function(velocity) #Hogan & Sternad
{
if(!all(velocity ==0))
{
acceleration <- butter.it(diff(velocity))
jerk         <- butter.it(diff(acceleration))
integrated_squared_jerk <- sum(jerk^2)
max_squaredvelocity <- max(velocity^2)
D3 <- (length(velocity))^3 ##scale per second 33Hz
jerk_dimensionless <-  integrated_squared_jerk*(D3/max_squaredvelocity)
smoothness <- jerk_dimensionless
}
if(all(velocity ==0)) #if all zero, this
{
smoothness <- 0
}
return(smoothness) #multiply by 1000 to get less fractioned number
}
#kinematic feature extraction
kin.get <- function(MT)
{
MT <- data.frame(MT)
submovements <- sum(c(nrow(findpeaks(MT$velocity_nose, minpeakdistance = 8)),
nrow(findpeaks(MT$velocity_left_w, minpeakdistance = 8)),
nrow(findpeaks(MT$velocity_left_w, minpeakdistance = 8)),
nrow(findpeaks(MT$velocity_left, minpeakdistance = 8)),
nrow(findpeaks(MT$velocity_right, minpeakdistance = 8))), na.rm=TRUE)
smoothness <- mean(c(smooth.get(MT$velocity_nose), smooth.get(MT$velocity_left_w), smooth.get(MT$velocity_left_w),  smooth.get(MT$velocity_left), smooth.get(MT$velocity_right)))
gspace <- mean(c( (max(MT$x_nose)-min(MT$x_nose))*(max(MT$y_nose)-min(MT$y_nose)),
(max(MT$x_index_left)-min(MT$x_index_left))*(max(MT$y_index_left)-min(MT$y_index_left)),
(max(MT$x_index_right)-min(MT$x_index_right))*(max(MT$y_index_right)-min(MT$y_index_right)),
(max(MT$x_wrist_left)-min(MT$x_wrist_left))*(max(MT$y_wrist_left)-min(MT$y_wrist_left)),
(max(MT$x_wrist_right)-min(MT$x_wrist_right))*(max(MT$y_wrist_right)-min(MT$y_wrist_right))))
features <- cbind(submovements, smoothness, gspace)
return(features)
}
entropy1 <- chain <- generation <- clustercof <- kinch <- cluster_persistence <- p <-
submovements <- smoothness <- gspace <-   entropyWfun  <-entropyWtheme <-  vector()
for(ch in c("chain1", "chain2", "chain3", "chain4", "chain5"))
{
for(gen in c(0:5))
{
if(gen == 0)
{
participants <- ""
type = "0_"
}
if(gen != 0)
{
type = "1_"
participants <- as.character(unique(ts$ppn[ts$chain == ch & ts$generation == gen]))
}
#DO network analysis
for(ppn in participants)
{
mat <- read.csv(paste0(matrices_data, type, ch, gen, ppn, ".csv"))
funtypes <-  unique(ts$functional)
themtypes <-  unique(ts$theme)
for(at in 1:4)
{
indexfun <- which(colnames(mat)%in%unique(ts$object[ts$functional==funtypes[at] ]) )
fun_mat     <- mat[indexfun,  indexfun]
indextheme <- which(colnames(mat)%in%unique(ts$object[ts$theme==themtypes[at] ]) )
them_mat     <- mat[indextheme, indextheme]
#within theme/function entropy/distance
tempfunnet <- graph.adjacency(as.matrix(fun_mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropyWfun <- c(entropyWfun, mean(diversity(tempfunnet)))
tempthemnet <- graph.adjacency(as.matrix(them_mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropyWtheme <- c(entropyWtheme, mean(diversity(tempthemnet)))
}
#compute entropy
tempnet <- graph.adjacency(as.matrix(mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropy1 <- c(entropy1, mean(diversity(tempnet)))
chain <- c(chain, ch)
generation <- c(generation, gen)
#agglomerative cluster coefficient
cl <- agnes(mat, method = "ward")
clustercof <- c(clustercof, cl$ac)
#average component persistence (TDA)
phom.dat <-   as.data.frame(calculate_homology(as.dist(mat), format = "distmat"))
phom.dat <-    phom.dat[phom.dat$dimension==0,]
phom.dat$persistence <-   phom.dat[,3]-phom.dat[,2]
tresh <- id_significant(phom.dat, dim = 0, cutoff = 0.975)
pers_loops <- sum(phom.dat$persistence > tresh)
persistence <- mean(phom.dat$persistence[phom.dat$persistence > tresh],na.rm=TRUE)
cluster_persistence <- c(cluster_persistence, persistence)
p <- c(p, ppn)
#get time series to regress for kinematic analysis
if(gen != 0)
{
kinematics<- data.frame()
kin <- ts[ts$ppn == ppn,]
for(o in unique(kin$object))
{
subkin <- kin[kin$object == o,]
kinematics <- rbind(kinematics, kin.get(subkin))
}
}
if(gen == 0)
{
kinematics<- data.frame()
kin <- subset(seeds, seedsetnum %in% ts$seedsetnum[ts$chain == ch])
for(o in unique(kin$object))
{
subkin <- kin[kin$object == o,]
kinematics <- rbind(kinematics, kin.get(subkin))
}
}
#save kinematic info
submovements <- c(submovements, mean(kinematics[,1], na.rm=TRUE))
smoothness <- c(smoothness, mean(kinematics[,2], na.rm=TRUE))
gspace <- c(gspace, mean(kinematics[,3], na.rm=TRUE))
}
}
}
ned <- cbind.data.frame(chain, generation, entropy1, clustercof, cluster_persistence,p, submovements, gspace, smoothness,  entropyWtheme, entropyWfun)
a <- ggplot(ned, aes(x= generation, y = entropyWfun, color = p)) + geom_point() + facet_grid(.~chain) + geom_smooth(method= "lm", color = "orange") + theme_bw()+ ggtitle("entropy")
b <- ggplot(ned, aes(x= generation, y = entropyWtheme, color = p)) + geom_point() + facet_grid(.~chain) + geom_smooth(method= "lm", color= "orange") + ggtitle("cluster coefficient") +theme_bw()
a
b
a
a <- ggplot(ned, aes(x= generation, y = entropyWfun, color = p)) + geom_point() + geom_smooth(method= "lm", color = "orange") + theme_bw()+ ggtitle("entropy")
b <- ggplot(ned, aes(x= generation, y = entropyWtheme, color = p)) + geom_point() + geom_smooth(method= "lm", color= "orange") + ggtitle("cluster coefficient") +theme_bw()
a
b
a <- ggplot(ned, aes(x= generation, y = entropyWfun)) + geom_point() + geom_smooth(method= "lm", color = "orange") + theme_bw()+ ggtitle("entropy within function")
b <- ggplot(ned, aes(x= generation, y = entropyWtheme)) + geom_point() + geom_smooth(method= "lm", color= "orange") + ggtitle("entropy wihthin theme") +theme_bw()
a
b
a <- ggplot(ned, aes(x= generation, y = entropyWfun/entropyWtheme)) + geom_point() + geom_smooth(method= "lm", color = "orange") + theme_bw()+ ggtitle("entropy within function")
a
View(ned)
entropy1 <- chain <- generation <- clustercof <- kinch <- cluster_persistence <- p <-
submovements <- smoothness <- gspace <-   entropyWfun  <-entropyWtheme <-  vector()
for(ch in c("chain1", "chain2", "chain3", "chain4", "chain5"))
{
for(gen in c(0:5))
{
if(gen == 0)
{
participants <- ""
type = "0_"
}
if(gen != 0)
{
type = "1_"
participants <- as.character(unique(ts$ppn[ts$chain == ch & ts$generation == gen]))
}
#DO network analysis
for(ppn in participants)
{
mat <- read.csv(paste0(matrices_data, type, ch, gen, ppn, ".csv"))
funtypes <-  unique(ts$functional)
themtypes <-  unique(ts$theme)
for(at in 1:4)
{
indexfun <- which(colnames(mat)%in%unique(ts$object[ts$functional==funtypes[at] ]) )
fun_mat     <- mat[indexfun,  indexfun]
indextheme <- which(colnames(mat)%in%unique(ts$object[ts$theme==themtypes[at] ]) )
them_mat     <- mat[indextheme, indextheme]
#within theme/function entropy/distance
tempfunnet <- graph.adjacency(as.matrix(fun_mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropyWfun <- c(entropyWfun, mean(diversity(tempfunnet)))
tempthemnet <- graph.adjacency(as.matrix(them_mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropyWtheme <- c(entropyWtheme, mean(diversity(tempthemnet)))
}
entropyWfun   <- mean(entropyWfun)
entropyWtheme <- mean(entropyWtheme)
#compute entropy
tempnet <- graph.adjacency(as.matrix(mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropy1 <- c(entropy1, mean(diversity(tempnet)))
chain <- c(chain, ch)
generation <- c(generation, gen)
#agglomerative cluster coefficient
cl <- agnes(mat, method = "ward")
clustercof <- c(clustercof, cl$ac)
#average component persistence (TDA)
phom.dat <-   as.data.frame(calculate_homology(as.dist(mat), format = "distmat"))
phom.dat <-    phom.dat[phom.dat$dimension==0,]
phom.dat$persistence <-   phom.dat[,3]-phom.dat[,2]
tresh <- id_significant(phom.dat, dim = 0, cutoff = 0.975)
pers_loops <- sum(phom.dat$persistence > tresh)
persistence <- mean(phom.dat$persistence[phom.dat$persistence > tresh],na.rm=TRUE)
cluster_persistence <- c(cluster_persistence, persistence)
p <- c(p, ppn)
#get time series to regress for kinematic analysis
if(gen != 0)
{
kinematics<- data.frame()
kin <- ts[ts$ppn == ppn,]
for(o in unique(kin$object))
{
subkin <- kin[kin$object == o,]
kinematics <- rbind(kinematics, kin.get(subkin))
}
}
if(gen == 0)
{
kinematics<- data.frame()
kin <- subset(seeds, seedsetnum %in% ts$seedsetnum[ts$chain == ch])
for(o in unique(kin$object))
{
subkin <- kin[kin$object == o,]
kinematics <- rbind(kinematics, kin.get(subkin))
}
}
#save kinematic info
submovements <- c(submovements, mean(kinematics[,1], na.rm=TRUE))
smoothness <- c(smoothness, mean(kinematics[,2], na.rm=TRUE))
gspace <- c(gspace, mean(kinematics[,3], na.rm=TRUE))
}
}
}
ned <- cbind.data.frame(chain, generation, entropy1, clustercof, cluster_persistence,p, submovements, gspace, smoothness,  entropyWtheme, entropyWfun)
a <- ggplot(ned, aes(x= generation, y = entropyWfun)) + geom_point() + geom_smooth(method= "lm", color = "orange") + theme_bw()+ ggtitle("entropy within function")
a
View(ned)
funtypes[at]
funtypes[1]
funtypes[2]
funtypes[3]
entropyWfun  <-entropyWtheme  <- vector()
entropyWfun
for(at in 1:4)
{
indexfun <- which(colnames(mat)%in%unique(ts$object[ts$functional==funtypes[at] ]) )
fun_mat     <- mat[indexfun,  indexfun]
indextheme <- which(colnames(mat)%in%unique(ts$object[ts$theme==themtypes[at] ]) )
them_mat     <- mat[indextheme, indextheme]
#within theme/function entropy/distance
tempfunnet <- graph.adjacency(as.matrix(fun_mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropyWfun <- c(entropyWfun, mean(diversity(tempfunnet)))
tempthemnet <- graph.adjacency(as.matrix(them_mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropyWtheme <- c(entropyWtheme, mean(diversity(tempthemnet)))
}
entropyWtheme
entropyWfunctions   <- c(entropyWfunctions, mean(entropyWfun))
entropy1 <- chain <- generation <- clustercof <- kinch <- cluster_persistence <- p <-
submovements <- smoothness <- gspace <-   entropyWfunctions  <-entropyWthemes <-  vector()
for(ch in c("chain1", "chain2", "chain3", "chain4", "chain5"))
{
for(gen in c(0:5))
{
if(gen == 0)
{
participants <- ""
type = "0_"
}
if(gen != 0)
{
type = "1_"
participants <- as.character(unique(ts$ppn[ts$chain == ch & ts$generation == gen]))
}
#DO network analysis
for(ppn in participants)
{
mat <- read.csv(paste0(matrices_data, type, ch, gen, ppn, ".csv"))
#function/themespecifics
funtypes <-  unique(ts$functional)
themtypes <-  unique(ts$theme)
entropyWfun  <-entropyWtheme  <- vector()
for(at in 1:4)
{
indexfun <- which(colnames(mat)%in%unique(ts$object[ts$functional==funtypes[at] ]) )
fun_mat     <- mat[indexfun,  indexfun]
indextheme <- which(colnames(mat)%in%unique(ts$object[ts$theme==themtypes[at] ]) )
them_mat     <- mat[indextheme, indextheme]
#within theme/function entropy/distance
tempfunnet <- graph.adjacency(as.matrix(fun_mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropyWfun <- c(entropyWfun, mean(diversity(tempfunnet)))
tempthemnet <- graph.adjacency(as.matrix(them_mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropyWtheme <- c(entropyWtheme, mean(diversity(tempthemnet)))
}
entropyWfunctions   <- c(entropyWfunctions, mean(entropyWfun))
entropyWthemes <- c(entropyWthemes, mean(entropyWtheme))
#compute entropy
tempnet <- graph.adjacency(as.matrix(mat), mode="undirected", weighted=TRUE, diag = FALSE)
entropy1 <- c(entropy1, mean(diversity(tempnet)))
chain <- c(chain, ch)
generation <- c(generation, gen)
#agglomerative cluster coefficient
cl <- agnes(mat, method = "ward")
clustercof <- c(clustercof, cl$ac)
#average component persistence (TDA)
phom.dat <-   as.data.frame(calculate_homology(as.dist(mat), format = "distmat"))
phom.dat <-    phom.dat[phom.dat$dimension==0,]
phom.dat$persistence <-   phom.dat[,3]-phom.dat[,2]
tresh <- id_significant(phom.dat, dim = 0, cutoff = 0.975)
pers_loops <- sum(phom.dat$persistence > tresh)
persistence <- mean(phom.dat$persistence[phom.dat$persistence > tresh],na.rm=TRUE)
cluster_persistence <- c(cluster_persistence, persistence)
p <- c(p, ppn)
#get time series to regress for kinematic analysis
if(gen != 0)
{
kinematics<- data.frame()
kin <- ts[ts$ppn == ppn,]
for(o in unique(kin$object))
{
subkin <- kin[kin$object == o,]
kinematics <- rbind(kinematics, kin.get(subkin))
}
}
if(gen == 0)
{
kinematics<- data.frame()
kin <- subset(seeds, seedsetnum %in% ts$seedsetnum[ts$chain == ch])
for(o in unique(kin$object))
{
subkin <- kin[kin$object == o,]
kinematics <- rbind(kinematics, kin.get(subkin))
}
}
#save kinematic info
submovements <- c(submovements, mean(kinematics[,1], na.rm=TRUE))
smoothness <- c(smoothness, mean(kinematics[,2], na.rm=TRUE))
gspace <- c(gspace, mean(kinematics[,3], na.rm=TRUE))
}
}
}
ned <- cbind.data.frame(chain, generation, entropy1, clustercof, cluster_persistence,p, submovements, gspace, smoothness,  entropyWthemes, entropyWfunctions)
a <- ggplot(ned, aes(x= generation, y = entropyWfun)) + geom_point() + geom_smooth(method= "lm", color = "orange") + theme_bw()+ ggtitle("entropy within function")
View(ned)
a <- ggplot(ned, aes(x= generation, y = entropyWfunctions)) + geom_point() + geom_smooth(method= "lm", color = "orange") + theme_bw()+ ggtitle("entropy within function")
b <- ggplot(ned, aes(x= generation, y = entropyWthemes)) + geom_point() + geom_smooth(method= "lm", color= "orange") + ggtitle("entropy wihthin theme") +theme_bw()
a
b
a
a
grid.arrange(a,b)
grid.arrange(a,b, nrow =1)
a <- ggplot(ned, aes(x= generation, y = entropyWfunctions)) + geom_point() + geom_smooth(method= "lm", color = "orange") + theme_bw()+ ggtitle("entropy within functional grouping")
b <- ggplot(ned, aes(x= generation, y = entropyWthemes)) + geom_point() + geom_smooth(method= "lm", color= "orange") + ggtitle("entropy within theme grouping") +theme_bw()
grid.arrange(a,b, nrow =1)
a <- ggplot(ned, aes(x= generation, y = entropyWfunctions, color = chain)) + geom_point() + geom_smooth(method= "lm", color = "orange") + theme_bw()+ ggtitle("entropy within functional grouping")
b <- ggplot(ned, aes(x= generation, y = entropyWthemes, color = chain)) + geom_point() + geom_smooth(method= "lm", color= "orange") + ggtitle("entropy within theme grouping") +theme_bw()
grid.arrange(a,b, nrow =1)
a <- ggplot(ned, aes(x= generation, y = entropyWfunctions, color = chain)) + geom_point() + geom_smooth(method= "lm") + theme_bw()+ ggtitle("entropy within functional grouping")
b <- ggplot(ned, aes(x= generation, y = entropyWthemes, color = chain)) + geom_point() + geom_smooth(method= "lm") + ggtitle("entropy within theme grouping") +theme_bw()
grid.arrange(a,b, nrow =1)
a <- ggplot(ned, aes(x= generation, y = entropyWfunctions, color = chain)) + geom_point() + geom_smooth(method= "lm", alpha= 0.2) + theme_bw()+ ggtitle("entropy within functional grouping")
b <- ggplot(ned, aes(x= generation, y = entropyWthemes, color = chain)) + geom_point() + geom_smooth(method= "lm",alpha= 0.2) + ggtitle("entropy within theme grouping") +theme_bw()
grid.arrange(a,b, nrow =1)
a <- ggplot(ned, aes(x= generation, y = entropyWfunctions, color = chain)) + geom_point() + geom_smooth(method= "lm", alpha= 0.05) + theme_bw()+ ggtitle("entropy within functional grouping")
b <- ggplot(ned, aes(x= generation, y = entropyWthemes, color = chain)) + geom_point() + geom_smooth(method= "lm",alpha= 0.05) + ggtitle("entropy within theme grouping") +theme_bw()
grid.arrange(a,b, nrow =1)
a <- ggplot(ned, aes(x= generation, y = entropyWfunctions, color = chain)) + geom_point() + geom_smooth(method= "lm", alpha= 0.05) + theme_bw()+ ggtitle("entropy within functional grouping")
b <- ggplot(ned, aes(x= generation, y = entropyWthemes, color = chain)) + geom_point() + geom_smooth(method= "lm", color = "red") + ggtitle("entropy within theme grouping") +theme_bw()
grid.arrange(a,b, nrow =1)
a <- ggplot(ned, aes(x= generation, y = entropyWfunctions, color = chain)) + geom_point() + geom_smooth(method= "lm", color = "red") + theme_bw()+ ggtitle("entropy within functional grouping")
b <- ggplot(ned, aes(x= generation, y = entropyWthemes, color = chain)) + geom_point() + geom_smooth(method= "lm", color = "red") + ggtitle("entropy within theme grouping") +theme_bw()
grid.arrange(a,b, nrow =1)
a <- ggplot(ned, aes(x= generation, y = entropyWfunctions, color = chain)) + geom_point() + geom_smooth(method= "lm", size=0.1, alpha=0.02)+ geom_smooth(method= "lm", color = "red") + theme_bw()+ ggtitle("entropy within functional grouping")
b <- ggplot(ned, aes(x= generation, y = entropyWthemes, color = chain)) + geom_point()+ geom_smooth(method= "lm", size=0.1, alpha=0.02) + geom_smooth(method= "lm", color = "red") + ggtitle("entropy within theme grouping") +theme_bw()
grid.arrange(a,b, nrow =1)
a <- ggplot(ned, aes(x= generation, y = entropyWfunctions, color = chain)) + geom_point() + geom_smooth(method= "lm", size=0.1, alpha=0.02)+ geom_smooth(method= "lm", color = "red") + theme_bw()+ ggtitle("entropy within functional grouping") + theme(legend.position = "none")
b <- ggplot(ned, aes(x= generation, y = entropyWthemes, color = chain)) + geom_point()+ geom_smooth(method= "lm", size=0.1, alpha=0.02) + geom_smooth(method= "lm", color = "red") + ggtitle("entropy within theme grouping") +theme_bw()
grid.arrange(a,b, nrow =1)
a <- ggplot(ned, aes(x= generation, y = entropyWfunctions, color = chain)) + geom_point() + geom_smooth(method= "lm", size=0.1, alpha=0.02)+ geom_smooth(method= "lm", color = "red") + theme_bw()+ ggtitle("entropy within functional grouping") + theme(legend.position = "none")+  scale_fill_viridis_d()
b <- ggplot(ned, aes(x= generation, y = entropyWthemes, color = chain)) + geom_point()+ geom_smooth(method= "lm", size=0.1, alpha=0.02) + geom_smooth(method= "lm", color = "red") + ggtitle("entropy within theme grouping") +theme_bw()+ theme(legend.position = "none") +   scale_fill_viridis_d()
grid.arrange(a,b, nrow =1)
a <- ggplot(ned, aes(x= generation, y = entropyWfunctions, color = chain)) + geom_point() + geom_smooth(method= "lm", size=0.1, alpha=0.02)+ geom_smooth(method= "lm", color = "red") + theme_bw()+ ggtitle("entropy within functional grouping") + theme(legend.position = "none")+ scale_color_brewer(palette = "Dark2")
b <- ggplot(ned, aes(x= generation, y = entropyWthemes, color = chain)) + geom_point()+ geom_smooth(method= "lm", size=0.1, alpha=0.02) + geom_smooth(method= "lm", color = "red") + ggtitle("entropy within theme grouping") +theme_bw()+ theme(legend.position = "none") + scale_color_brewer(palette = "Dark2")
grid.arrange(a,b, nrow =1)
cor.test(ned$generation, ned$entropyWfunctions)
basem1 <- lme(entropyWfunctions~1, data = ned, random = ~generation|chain, method = "ML", na.action = na.exclude)
model1 <- lme(entropyWfunctions~generation, data = ned, random = ~generation|chain, method = "ML", na.action = na.exclude)
basem1 <- lme(entropyWfunctions~1, data = ned, random = ~1|chain, method = "ML", na.action = na.exclude)
model1 <- lme(entropyWfunctions~generation, data = ned, random = ~1|chain, method = "ML", na.action = na.exclude)
summary(model1)
basem1 <- lme(entropyWfunctions~1, data = ned, random = ~1+generation|chain, method = "ML", na.action = na.exclude)
model1 <- lme(entropyWfunctions~generation, data = ned, random = ~1+generation|chain, method = "ML", na.action = na.exclude)
basem1 <- lme(entropyWfunctions~1, data = ned, random = ~1|chain, method = "ML", na.action = na.exclude)
model1 <- lme(entropyWfunctions~generation, data = ned, random = ~1|chain, method = "ML", na.action = na.exclude)
basem1 <- lme(entropyWthemes~1, data = ned, random = ~1|chain, method = "ML", na.action = na.exclude)
model1 <- lme(entropyWthemes~generation, data = ned, random = ~1|chain, method = "ML", na.action = na.exclude)
summary(model1)
#not reliable
basem1 <- lme(entropyWthemes~1, data = ned, random = ~1+generation|chain, method = "ML", na.action = na.exclude)
model1 <- lme(entropyWthemes~generation, data = ned, random = ~1+generation|chain, method = "ML", na.action = na.exclude)
basem1 <- lme(entropyWthemes~1, data = ned, random = ~generation|chain, method = "ML", na.action = na.exclude)
model1 <- lme(entropyWthemes~generation, data = ned, random = ~generation|chain, method = "ML", na.action = na.exclude)
